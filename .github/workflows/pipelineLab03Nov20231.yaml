name: labsNov20231

on:
  push:
    branches:
      - main

jobs:
  integration:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: "Obteniendo ultima version del codigo"
        uses: actions/checkout@v3

      - name: "Instalacion Java"
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: "Compilacion"
        run: ./mvnw clean install

      - name: "Verificar paquete"
        run: ls -ltra target
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.YEMALABNOV2023AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.YEMALABNOV2023AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: "Generación de imagen de docker y carga de imagen ECR"
        run: |
          IMAGE_NAME="docker.io/my-organization/my-app:${{ github.sha }}"
          docker build -f Dockerfile -t $IMAGE_NAME .
          echo "Image Reference: $IMAGE_NAME"
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/n3j7o1e0
          docker tag $IMAGE_NAME public.ecr.aws/n3j7o1e0/yemaecr:latest
          docker push public.ecr.aws/n3j7o1e0/yemaecr:latest

      - name: "Aprovisionamiento de terraform"
        run: |
          cd terraformAws1
          terraform init
          terraform validate 
          terraform plan -out tfplan
          terraform apply tfplan
        continue-on-error: true
        
      - name: "Ejecutar Ansible"
        run: |
          cd ansibleAws1
          ansible-playbook -i inventario1 serverAws.yml --become
          cat /terraformAws1/inventario1
        continue-on-error: true

      - name: "Instalar Arachni"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
        continue-on-error: true
 
      - name: "Finding IP"
        run: IP=$(docker inspect WebGoat | grep "IPAddress" | tail -1 | cut -d '"' -f 4)
        continue-on-error: true 

      - name: "Ejecuta Arachni"
        run: ./arachni-1.6.1.3-0.6.1.1/bin/arachni --check=* http://$IP:8080/WebGoat/login
 
      - name: "Destrucción"
        run: |
          cd terraformAws1
          terraform plan -destroy -out tfplan
          terraform apply tfplan
          terraform destroy
        continue-on-error: true