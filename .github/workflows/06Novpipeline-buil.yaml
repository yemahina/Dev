name: GOAT Compile Uno
 
on:
  push:
    branches:
      - main
 
jobs:
  integration:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
 
    steps:
      - name: "Obteniendo ultima version del codigo"
        uses: actions/checkout@v3
 
      - name: "Instalacion Java"
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
 
      - name: "Compilacion"
        run: ./mvnw clean install
 
      - name: "Verificar paquete"
        run: ls -ltra target
 
      - name: "Dependency Check"
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: 'WebGoat'
          path: '.'
          format: 'HTML'
          out: 'reports'
 
      - name: "Verificar reporte"
        run: ls -ltra reports
 
      - name: "Instalando Horusec"
        run: |
          curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest-beta
 
      - name: "Horusec -SAST"
        run: horusec start -p="./"

      - name: "Generaci√≥n de imagen de docker"
        run: |
          IMAGE_NAME="docker.io/my-organization/my-app:${{ github.sha }}"
          docker build -f Dockerfile -t $IMAGE_NAME .
          echo "Image Reference: $IMAGE_NAME"
 
      - name: "Run Trivy vulnerability scanner"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.integration.outputs.image_name }}
          timeout: 10m0s
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          scanners: vuln,secret,config
          format: 'SARIF'
          output: 'trivy-results.sarif'
        continue-on-error: true
         
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'code'
 
      - name: "Contenedor"
        run: docker run -d -p 8080:80 --name cod webgoat/test
    
      - name: "Listado"
        run: docker ps -a
 
      - name: "Iniciar"
        run: docker container start cod
 
      - name: "Installing Arachni"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
 
      - name: "Finding IP"
        run: var_IP=$(docker inspect ${{ steps.integration.outputs.image_name }} | grep "IPAddress" | tail -1 | cut -d ',' -f 4)
 
      - name: "Executing Arachni"
        run: ./arachni-1.6.1.3-0.6.1.1/bin/arachni --check=* http://$var_IP:8080/WebGoat/login
 
      - name: "Crear Contenedor"
        run: |
          docker container stop cod
          docker container rm cod