name: GOAT Compile # Nombre del flujo de trabajo

on:
  push:
    branches:
      - main  # El flujo se ejecutará en cada push a la rama 'main'

jobs:
  integration:
    runs-on: ubuntu-latest # Se ejecutará en una máquina virtual con Ubuntu
   

    steps:
      - name: "Obteniendo ultima version del codigo"
        uses: actions/checkout@v3 # Clona el repositorio actual en la máquina virtual

      - name: "Instalacion Java"
        uses: actions/setup-java@v3 # Instala Java 17 desde el distribuidor Temurin
        with:
          distribution: "temurin"
          java-version: "17"

      - name: "Compilacion"
        run: ./mvnw clean install # Compila la aplicación Java con Maven

      - name: "Verificar paquete"
        run: ls -ltra target # Lista los archivos en el directorio 'target'

      - name: "Dependency Check"
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: 'WebGoat'
          path: '.'
          format: 'HTML'
          out: 'reports'

      - name: "Verificar reporte"
        run: ls -ltra reports

      - name: "Instalando Horusec"
        run: |
          curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest-beta

      - name: "Horusec - SAST"
        run:  horusec start -p="./"

      - name: "Generación de imagen de docker, crear y ejecutar contenedor Docker"
        run: |
          IMAGE_NAME="docker.io/my-organization/my-app:${{ github.sha }}"
          docker build -f Dockerfile -t $IMAGE_NAME .
          echo "Image Reference: $IMAGE_NAME"
          docker run -d -p 8080:80 $IMAGE_NAME

      - name: "Ejecutar escáner de vulnerabilidades Trivy"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.integration.outputs.image_name }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      - name: "Esperar a que el contenedor se inicie"
        run: sleep 10

      - name: "Verificar estado del contenedor"
        run: docker ps | grep $IMAGE_NAME

      - name: "Manejo de errores si el contenedor no se encuentra"
        run: |
          if ! docker ps | grep -q $IMAGE_NAME; then
            echo "Error: El contenedor no se ha creado correctamente."
            exit 1
          fi

      - name: "Confirmación de finalización"
        run: echo "El flujo de trabajo se ha completado con éxito."
      
      - name: "contenedor"
        run: sudo docker run -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 webgoat/webgoat

      - name: "contenedor2"
        run: docker run --name webgoat -d -p 8080:8080 -p 9090:9090 webgoat/webgoat

      - name: "Instalar Arachni"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
 
      - name: "Finding IP"
        run: IP=$(docker inspect WebGoat | grep "IPAddress" | tail -1 | cut -d '"' -f 4)
 
      - name: "Ejecuta Arachni"
        run: ./arachni-1.6.1.3-0.6.1.1/bin/arachni --check=* http://$IP:8080/WebGoat/login
 

        


 


      




        