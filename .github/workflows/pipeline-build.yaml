name: GOAT Compile # Nombre del flujo de trabajo

on:
  push:
    branches:
      - main  # El flujo se ejecutará en cada push a la rama 'main'

jobs:
  integration:
    runs-on: ubuntu-latest # Se ejecutará en una máquina virtual con Ubuntu
    permissions:
      security-events: write
      actions: read
      contents: read
   

    steps:
      - name: "Obteniendo ultima version del codigo"
        uses: actions/checkout@v3 # Clona el repositorio actual en la máquina virtual

      - name: "Instalacion Java"
        uses: actions/setup-java@v3 # Instala Java 17 desde el distribuidor Temurin
        with:
          distribution: "temurin"
          java-version: "17"

      - name: "Compilacion"
        run: ./mvnw clean install # Compila la aplicación Java con Maven

      - name: "Verificar paquete"
        run: ls -ltra target # Lista los archivos en el directorio 'target'

      - name: "Dependency Check"
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: 'WebGoat'
          path: '.'
          format: 'HTML'
          out: 'reports'   

      - name: "Verificar reporte"
        run: ls -ltra reports

      - name: "Instalando Horusec"
        run: |
          curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest-beta

      - name: "Horusec - SAST"
        run:  horusec start -p="./"     
    
      - name: "Generación de imagen de docker, crear y ejecutar docker, carga de imagen ECR"
        run: |
          IMAGE_NAME="docker.io/my-organization/my-app:${{ github.sha }}"
          docker build -f Dockerfile -t $IMAGE_NAME .
          echo "Image Reference: $IMAGE_NAME"
          docker tag $IMAGE_NAME public.ecr.aws/n3j7o1e0/yemaecr:latest
          docker images
#          echo "ECR"
#          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/n3j7o1e0
#          docker push public.ecr.aws/n3j7o1e0/yemaecr:latest

#      - name: "Generación de imagen de docker, crear y ejecutar contenedor Docker"
 #       run: |
 #         IMAGE_NAME="docker.io/my-organization/my-app:${{ github.sha }}"
 #         docker build -f Dockerfile -t $IMAGE_NAME .
 #         echo "Image Reference: $IMAGE_NAME"
 #         docker run -d -p 8080:80 $IMAGE_NAME

      - name: "Verificar estado del contenedor"
        run: docker ps | grep $IMAGE_NAME
        continue-on-error: true

      - name: "Manejo de errores si el contenedor no se encuentra"
        run: |
          if ! docker ps | grep -q $IMAGE_NAME; then
            echo "Error: El contenedor no se ha creado correctamente."
            exit 1
          fi
        continue-on-error: true

      - name: "Esperar a que el contenedor se inicie"
        run: sleep 10


      - name: "Confirmación de finalización"
        run: echo "El flujo de trabajo se ha completado con éxito."

      - name: "Scan Infra: Checkov"
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: cli,sarif
          output_file_path: console,results.sarif
          directory: terraformAWS
          framework: terraform
          soft_fail: true  
        continue-on-error: true   

#      - name: "Aprovisianamiento con terraform"
#        run: |
#          cd Terraform
#          terraform init
#          terraform plan -out tfplan
#          terraform apply tfplan >> results_tfplan.txt
#          ip_webgoat=$(cat results_tfplan.txt | grep "My_ip = " | awk '{ print $3 }' | sed 's/"//g')
#          sed -i "s/IP/$ip_webgoat/g" ../Ansible/inventario  
#        continue-on-error: true  

#      - name: "Ansible"
#        env:
#          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
#        run: |
#          sudo apt update
##          sudo apt install -y ansible
#          cd Ansible
#          echo "$PRIVATE_KEY" >> $HOME/key.pem
#          sudo chmod 600 $HOME/key.pem
#          export ANSIBLE_HOST_KEY_CHECKING=False
#          ansible-playbook -i inventario server.yml --become --private-key $HOME/key.pem
#          echo "Up server..."
#         sleep 45
#        continue-on-error: true 

      - name: "Ejecutar escáner de vulnerabilidades Trivy"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.integration.outputs.image_name }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Run static analysis
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 
          timeout: 10m0s
          exit-code: '1'
          severity: 'CRITICAL, HIGH'
          scanners: 'vuln,secret,config'
          format: 'SARIF'
          output: 'trivy-results.sarif'


      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'code'
      

      - name: "Instalar Arachni"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
 
      - name: "Finding IP"
        run: |
          ip_webgoat=$(cat Terraform/results_tfplan.txt | grep "My_ip = " | awk '{ print $3 }' | sed 's/"//g')
          curl http://$ip_webgoat:8080/WebGoat/login
 
      - name: "Ejecuta Arachni"
        run: ./arachni-1.6.1.3-0.6.1.1/bin/arachni --check=* http://$ip_webgoat:8080/WebGoat/login

      - name: "Destruccion de infraestructura"
        run: |
          cd Terraform
          terraform plan -destroy -out tfplan
          terraform apply tfplan


 


      




        